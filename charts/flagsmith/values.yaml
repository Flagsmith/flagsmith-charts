api:
  image:
    repository: flagsmith/flagsmith-api
    tag: null  # defaults to .Chart.AppVersion
    imagePullPolicy: IfNotPresent
    imagePullSecrets: []
  replicacount: 1
  podAnnotations: {}
  resources: {}
  # limits:
  #   cpu: 500m
  #   memory: 500Mi
  # requests:
  #   cpu: 300m
  #   memory: 300Mi
  podLabels: {}
  extraEnv: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podSecurityContext: {}
  defaultPodSecurityContext:
    enabled: true
    # runAsNonRoot: true  # TODO: enable this, conditional on tag semver
    # runAsUser: 1000
    # runAsGroup: 1000
  livenessProbe:
    failureThreshold: 5
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 2
  readinessProbe:
    failureThreshold: 10
    initialDelaySeconds: 1
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 2
  dbWaiter:
    image:
      repository: willwill/wait-for-it
      tag: latest
      imagePullPolicy: IfNotPresent
    timeoutSeconds: 30

frontend:
  enabled: true
  image:
    repository: flagsmith/flagsmith-frontend
    tag: null  # defaults to .Chart.AppVersion
    imagePullPolicy: IfNotPresent
    imagePullSecrets: []
  replicacount: 1
  resources: {}
  # limits:
  #   cpu: 500m
  #   memory: 500Mi
  # requests:
  #   cpu: 300m
  #   memory: 300Mi
  apiProxy:
    enabled: true
  extraEnv: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podSecurityContext: {}
  defaultPodSecurityContext:
    enabled: true
    # runAsNonRoot: true  # TODO: enable this, conditional on tag semver
    # runAsUser: 1000
    # runAsGroup: 1000
  livenessProbe:
    failureThreshold: 20
    initialDelaySeconds: 20
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 10
  readinessProbe:
    failureThreshold: 20
    initialDelaySeconds: 20
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 10

postgresql:
  enabled: true
  serviceAccount:
    enabled: true
  nameOverride: flagsmith-postgresql
  postgresqlDatabase: flagsmith
  postgresqlUsername: postgres
  postgresqlPassword: flagsmith

databaseExternal:
  enabled: false
  url: null
  type: postgres
  host: null
  port: 5432
  database: null
  username: null
  password: null
  urlFromExistingSecret:
    enabled: false
    name: null
    key: null

influxdb:
  enabled: true
  nameOverride: influxdb
  image:
    repository: quay.io/influxdb/influxdb
    tag: v2.0.2
    imagePullPolicy: IfNotPresent
    imagePullSecrets: []
  adminUser:
    organization: "influxdata"
    bucket: "default"
    user: "admin"
    # Leave empty to generate a random password and token.
    # Or fill any of these values to use fixed values.
    password: ""
    token: ""
  persistence:
    enabled: false
    # name: influxdb-pvc
    # storageClass: "-"
    # accessMode: ReadWriteOnce
    # size: 50Gi
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

influxdbExternal:
  enabled: false
  url: null
  bucket: null
  organization: null
  token: null
  tokenFromExistingSecret:
    enabled: false
    name: null
    key: null

service:
  influxdb:
    externalPort: 8080
  api:
    type: ClusterIP
    port: 8000
  frontend:
    type: ClusterIP
    port: 8080

ingress:
  frontend:
    enabled: false
    annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths: []
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  api:
    enabled: false
    annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths: []
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
